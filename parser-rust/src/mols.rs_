// use std::{path, fs, io};
// use std::io::prelude::*;
// use flate2::read::GzDecoder;
// use std::ops::Index;

// pub struct Mols<'a> {
//     contents: String,
//     mols: Vec<&'a str>,
//     populated: bool,
//     input_dir: &'a path::Path,
// }

// impl<'a> Mols<'a> {
//     pub fn new(input_dir: &'a path::Path) -> Mols<'a> {
//         Mols {
//             contents: String::new(),
//             mols: Vec::new(),
//             populated: false,
//             input_dir: input_dir,
//         }
//     }

//     pub fn load_mols(self : &mut Self, input_dir: &path::Path, sdf_name: &str) -> Result<(), io::Error>{
//         self.mols.clear();
//         self.contents.clear();

//         let sdf_file_path = input_dir.join(sdf_name.replace("_rescore", ".sdf.gz"));
//         let sdf_file = fs::File::open(sdf_file_path)?;
//         let mut sdf_decoder = GzDecoder::new(sdf_file);
//         // let mut sdf_contents = String::new();
    
//         sdf_decoder.read_to_string(&mut self.contents)?;
//         Ok(())
//     }

//     fn get_content(&self) -> &str {
//         &self.contents
//     }

//     pub fn split_mols(&mut self) -> () {
        
//         let split = self.get_content().split("$$$$");
//         self.mols = split.collect();
        
//         // self.mols = self.contents.split::<'b>("$$$$").collect();
//         self.populated = true;    
//     }
// }

// impl<'a> Index<usize> for Mols<'a> {
//     type Output = str;

//     fn index(&self, index: usize) -> &str {
//         if !self.populated{
//             return "";
//         }
//         &self.mols[index]
//     }
// }